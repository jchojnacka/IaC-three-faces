AWSTemplateFormatVersion: '2010-09-09'
Description: >
  This CloudFormation template provisions an infrastructure example, 
  which includes the following components:
    - An Amazon S3 bucket configured for static website hosting.
    - An AWS API Gateway integrated with a Lambda function that returns "Hello World!".

Resources:
# ----------------------------------------------------------
# 1) S3 Bucket for Hosting the Static Website
# ----------------------------------------------------------
  MyWebsiteBucket:
    Type: AWS::S3::Bucket
    Properties:
      WebsiteConfiguration:
        IndexDocument: index.html
      BucketName: !Sub 'jch-cloudformation-${AWS::StackName}'
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false

  MyWebsiteBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref MyWebsiteBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: PublicReadGetObject
            Effect: Allow
            Principal: '*'
            Action: 's3:GetObject'
            Resource: !Sub '${MyWebsiteBucket.Arn}/*'

  # ----------------------------------------------------------
  # 2) Lambda Function returning "Hello World!"
  # ----------------------------------------------------------
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub 'MyHelloWorldLambdaRole-${AWS::StackName}'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: 
                - lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  MyLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub 'HelloWorldLambda-${AWS::StackName}'
      Runtime: python3.9
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          def handler(event, context):
              return {
                  "statusCode": 200,
                  "body": "Hello World, Cloudformation here!"
              }

  # ----------------------------------------------------------
  # 3) API Gateway to Invoke the Lambda
  # ----------------------------------------------------------
  MyApiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub 'HelloWorldApi-${AWS::StackName}'

  MyApiGatewayResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref MyApiGateway
      ParentId: !GetAtt MyApiGateway.RootResourceId
      PathPart: hello

  MyApiGatewayMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref MyApiGateway
      ResourceId: !Ref MyApiGatewayResource
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${MyLambdaFunction.Arn}/invocations"
        IntegrationResponses:
          - StatusCode: 200
      MethodResponses:
        - StatusCode: 200

  MyApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn: MyApiGatewayMethod
    Properties:
      RestApiId: !Ref MyApiGateway
      StageName: prod

  MyLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt MyLambdaFunction.Arn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${MyApiGateway}/*/GET/hello"

Outputs:
  WebsiteURL:
    Description: "Access your static HTML page from this S3 bucket website endpoint."
    Value: !GetAtt MyWebsiteBucket.WebsiteURL

  ApiEndpoint:
    Description: "Invoke the Lambda by sending a GET request to /hello"
    Value: !Sub "https://${MyApiGateway}.execute-api.${AWS::Region}.amazonaws.com/prod/hello"
